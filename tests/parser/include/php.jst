<?%
/*
 If not stated otherwise in this file or this component's Licenses.txt file the
 following copyright and licenses apply:

 Copyright 2018 RDK Management

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/
?>

<?%

/* PHP API Implementation in Javascript
 * There are several php specific functions called throughout the webui.
 * Its not trivial to find and update them all to a js equivalent,
 * so these functions are reimplemented in javascript such that
 * no change is needed to the pages that call these methods.
 *
 * note that both empty and isset will probably not work if the variable
 * being passed has not be declared. this might require changes to the pages 
 * calling these.
 */

function print_r($obj)
{
  if(Array.isArray($obj))
  {
    echo("Array\n(\n");
    for(var i = 0; i < $obj.length; ++i)
    {
      echo("    ["+i+"] => "+$obj[i]+ "\n");
    }
    echo(")");
  }
  else if(typeof($obj) == 'object')
  {
    echo("Array\n(\n");
    for(var i in $obj)
    {
      echo("    ["+i+"] => "+$obj[i]+ "\n");
    }
    echo(")");
  }
  else if(typeof($obj) != 'undefined')
  {
    echo($obj.toString());
  }
  else
  {
    echo('undefined');
  }
  echo("\n");
}

const ENT_NOQUOTES=8;

//TODO: use duktape encode function for ut8
const ENT_NOQUOTES=8;
function htmlspecialchars(text, flags, encoding) {
	if(typeof(text) != 'string')
		return "";
  return text.replace(!(flags & ENT_NOQUOTES) ? /[&<>"']/g : /[&<>]/g, function(m) { 
    if(m == '&') 
      return '&amp;';
    else if(m == '<')
      return '&lt;';
    else if(m == '>')
      return '&gt;';
    else if(m == '"')
      return '&quot;';
    else if(m == "'");
      return '&#039;';
  });
}

// count the number of items in either an array or object
function count($object_or_array)
{
  return Object.keys($object_or_array).length;
}

function sizeof($object_or_array)
{
  return count($object_or_array);
}

/*
 * php empty considers the following as empty:
 * "" (an empty string)
 * 0 (0 as an integer)
 * 0.0 (0 as a float)
 * "0" (0 as a string)
 * null
 * FALSE
 * array() (an empty array)
 * Maybe we don't need all this but i'm replicating as closely as possible in case the webui depends on the logic somewhere
 */
function empty($obj)
{
  if($obj == null)
    return true;

  var $objtype = typeof($obj);

  if($objtype == 'undefined')
    return true;

  if($objtype == 'string')
    return $obj.length == 0 || $obj == '0';

  if($objtype == 'number')
    return $obj == 0;

  if($objtype == 'boolean')
    return $obj == false;

  return false;
}

function isset($obj)
{
  return typeof($obj) !== 'undefined' && $obj != null;
}

function is_numeric($n)
{
  return !isNaN(parseInt($n, 10));
}

function str_replace($a, $b, $str)
{
  if(typeof($str) != 'string')
  	return false;
  return $str.replace($a, $b);
}

function strcmp($a, $b)
{
  if($a == $b)
    return 0;
  else if($a > $b)
    return 1;
  else
    return -1;
}

function strcasecmp($a, $b)
{
  return strcmp($a.toUpperCase(), $b.toUpperCase());
}

function strpos($str, $sub)
{
  var $i = $str.indexOf($sub);
  if($i != -1)
    return $i;
  else
    return false;
}

function stripos($str, $sub)
{
  return strpos($str.toUpperCase(), $sub.toUpperCase());
}

function strtoupper($str)
{
  return $str.toUpperCase();
}

function strtolower($str)
{
    return $str.toLowerCase();
}

function strip_tags(input) {
   return input.replace(/<[^>]*>/g, '');
}

function strstr($str,$sub)
{
  if(typeof($str) !== "undefined"){
    var $i = $str.indexOf($sub);
    if($i != -1)
      return $str.substr($i);
  }
  return false;
}

function stristr($str,$sub)
{
  return strstr($str.toLowerCase(), $sub.toLowerCase());
}

function substr($str, $pos, $len)
{
  $len = $len || 0;
  if($len)
    return $str.substr($pos,$len);
  else
    return $str.substr($pos);
}

function strtotime(str)
{
  var date = new Date();
  if(str=="now")
  {
  }
  else if(str=="today")
  {
    date.setDate(date.getDate());
    date.setHours(0,0,0,0);
  }
  else if(str=="yesterday")
  {
    date.setDate(date.getDate() - 1);
    date.setHours(0,0,0,0);
  }
  else if(str=="this Monday")
  {
    day = date.getDay(),
    date.setDate(date.getDate() - day + (day == 0 ? -6:1));
    date.setHours(0,0,0,0);
  }
  else if(str=="last Monday")
  {
    day = date.getDay(),
    date.setDate(date.getDate() -7 - day + (day == 0 ? -6:1));
    date.setHours(0,0,0,0);
  }
  else if(str=="this month")
  {
    date.setDate(1);// = new Date(date.getFullYear(), date.getMonth(), 1);
    date.setHours(0,0,0,0);
  }
  else if(str=="last month")
  {
    date.setMonth(date.getMonth()-1);// = new Date(date.getFullYear(), date.getMonth()-1, 1);
    date.setDate(1);
    date.setHours(0,0,0,0);
  }
  else if(str=="-90 days")
  {
    date.setDate(date.getDate()-90);
  }
  else
  {
    //one of the webui's known formats: "May 31 18:57:07 2019"
    //convert to ISO because duktape is very strict: "2019-05-31 18:57:07"
    if(typeof(s2tre1_)==='undefined')
      s2tre1_ = /^(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{2}) (\d{2}):(\d{2}):(\d{2}) (\d{4})[\s]+$/g;
    if(str.match(s2tre1_))
    {
      if(typeof(s2tmonths_)==='undefined')
        s2tmonths_={Jan:0,Feb:1,Mar:2,Apr:3,May:4,Jun:5,Jul:6,Aug:7,Sep:8,Oct:9,Nov:10,Dec:11};
      var p=str.split(' ');
      var t=p[2].split(':');
      date =new Date(
        parseInt(p[3], 10),
        parseInt(s2tmonths_[p[0]],10), 
        parseInt(p[1],10),
        parseInt(t[0],10),
        parseInt(t[1],10),
        parseInt(t[2],10)
      );
    }
    else
    {
      date = null;
    }
  }
  if(date)
    return date.getTime();
  else
    throw Error("strtotime: unsupported time format");
}

function strlen($str)
{
  return $str.length;
}

function explode($sep, $str)
{
  if(typeof($str) !== "undefined"){
    return $str.split($sep);
  }
  return;
}

function implode($sep, $arr)
{
  if(!Array.isArray($arr))
    return false;
  var out="";
  for(var i = 0; i < $arr.length; ++i)
  {
    if(i > 0)
      out += $sep;
    out += $arr[i];
  }
  return out;
}

function in_array($val, $arr)
{
  var contains = function(needle) {
    var findNaN = needle !== needle;
    var indexOf;
    if(!findNaN && typeof Array.prototype.indexOf === 'function')
    {
      indexOf = Array.prototype.indexOf;
    } 
    else 
    {
      indexOf = function(needle) {
        var i = -1, index = -1;
        for(i = 0; i < this.length; i++)
        {
          var item = this[i];

          if((findNaN && item !== item) || item === needle)
          {
            index = i;
            break;
          }
        }
        return index;
      };
    }
    return indexOf.call(this, needle) > -1;
  };
  return contains.call($arr, $val);
}

function is_array($arr)
{
  return Array.isArray($arr);
}

function array_push($arr, $value)
{
  if(!Array.isArray($arr))
    throw Error("array_push type not array");
  $arr.push($value);
}
function array_pop($arr)
{
  if(!Array.isArray($arr))
    throw Error("array_push type not array");
  return $arr.pop();
}
function array_remove($a, $i)
{
  if(!Array.isArray($a))
    throw Error("array_remove type not array");
  $a.splice($i,1);
}
function array_reverse($a)
{
  return $a.reverse();
}
function array_keys($arr, $search_val, $strict)
{
  $search_val = $search_val || 0;
  $strict = $strict || 0;

  if($search_val)
  {
    var $keys_out = new Array();
    var $val2str = null;

    if(!$strict)
      $val2str = $search_val.toString();

    for($key in $arr)
    {
      $val = $arr[$key];

      if($strict)
      {
        if(typeof($val) == typeof($search_val) &&
           $val == $search_val)
        {
          $keys_out.push($key);
        }
      }
      else
      {
        if($val.toString() == $val2str)
        {
          $keys_out.push($key);
        }
      }
    }
    return $keys_out;
  }
  else
  {
    return Object.keys($arr);
  }
}
function array_filter($arr, $cb)
{
  if(!Array.isArray($arr))
    throw Error("array_filter not array");
  $cb = $cb || 0;
  if($cb) 
  {//FIXME todo
    throw Error("array_filter callback not supported");
  } 
  else
  {
    var $out = [];
    for(var i = 0; i < $arr.length; ++i)
    {
      var v = $arr[i];
      if(!empty(v))
        $out.push(v);
    }
    return $out;
  }
}
function array_key_exists(key,arr)
{
  for(var k in arr)
  {
    if(k === key)
      return true;
  }
  return false;
}
function array_map(func, arr)
{
  var out = [];
  for(var i =0; i < arr.length; ++i)
  {
    out[i] = func(arr[i]);
  }
  return out;
}
function remove_directory_contents($JWTdir)
{
}
function ob_implicit_flush(bval)
{
}

function ob_end_flush()
{
}
//Copyright (c) 2007-2016 Kevin van Zonneveld (https://kvz.io) 
//and Contributors (https://locutus.io/authors)
//Licensed under the MIT license
// based on http://locutus.io/php/network/inet_pton/
function inet_pton (a) { // eslint-disable-line camelcase
  //  discuss at: http://locutus.io/php/inet_pton/
  // original by: Theriault (https://github.com/Theriault)
  //   example 1: inet_pton('::')
  //   returns 1: '\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'
  //   example 2: inet_pton('127.0.0.1')
  //   returns 2: '\x7F\x00\x00\x01'

  if(a == null || typeof(a) != 'string' || a.length == 0)
  {
    return false;
  }

  var r
  var m
  var x
  var i
  var j
  var f = String.fromCharCode

  // IPv4
  m = a.match(/^(.*:)?(?:\d{1,3}(?:\.|$)){4}/)
  if (m) {
    m = m[0].split('.')
    m = f(m[0].replace(/^(.*:)/g, '')) + f(m[1]) + f(m[2]) + f(m[3])
    // Return if 4 bytes, otherwise false.
    return m.length === 4 ? m : false
  }
  r = /^((?:[\da-f]{1,4}(?::|)){0,8})(::)?((?:[\da-f]{1,4}(?::|)){0,8})$/i;

  // IPv6
  m = a.match(r)
  if (m) {
    // Translate each hexadecimal value.
    for (j = 1; j < 4; j++) {
      // Indice 2 is :: and if no length, continue.
      if (j === 2 || m[j].length === 0) {
        continue
      }
      m[j] = m[j].split(':')
      for (i = 0; i < m[j].length; i++) {
        m[j][i] = parseInt(m[j][i], 16)
        // Would be NaN if it was blank, return false.
        if (isNaN(m[j][i])) {
          // Invalid IP.
          return false
        }
        m[j][i] = f(m[j][i] >> 8) + f(m[j][i] & 0xFF)
      }
      m[j] = m[j].join('')
    }
    x = m[1].length + m[3].length
    if (x === 16) {
      return m[1] + m[3]
    } else if (x < 16 && m[2].length > 0) {
      return m[1] + (new Array(16 - x + 1))
        .join('\x00') + m[3]
    }
  }

  // Invalid IP
  return false
}

function round($val)
{
	return Math.round($val);
}

function intval($val)
{
	return parseInt($val);
}

function trim($val)
{
  return $val.trim();
}

function sleep($secs)
{
	var date = Date.now();
	var currentDate = "";
  	do {
    		currentDate = Date.now();
  	} while (currentDate - date < ($secs*1000));
}

function exec($cmd, $out)
{
  return ccsp.exec($cmd);
}

function file_exists(filepath)
{//FIXME not exactly -- could exist as read-only 
  return is_readable(filepath);
}

function parseIP(addr)
{
  //addr might have brackets around ip
  //can occur for both ipv6 and ipv4(cgi param)
  var i = addr.indexOf('[');
  if(i != -1)
  {
    var j = addr.indexOf(']');
    if(j > i)
    {
      addr = addr.substring(i+1, j);
    }
  }

  //determine if ipv4 or 6
  i = addr.indexOf('.');
  if(i != -1)
  { 
    //ipv4
    //remove any ipv6 mapping/translating prefix 
    // e.g. ::ffff:IP, ::ffff:0:IP, 64:ff9b::IP
    //and remove any port e.g. IP:port
    //can handle both with split
    var parts = addr.split(':');
    if(parts.length == 1)
      return addr;
    else
    {
      for(var j = 0; j < parts.length; ++j)
      {
        if(parts[j].indexOf('.') != -1)
          return parts[j];
      }
    }
  }
  else
  { 
    //ipv6 - nothing left to process
    return addr;
  }

  //unexpected address format
  return addr;
}

function json_decode($str)
{
  return JSON.parse($str);
}

function json_encode($obj)
{
  return JSON.stringify($obj);
}

function preg_match($re, $str)
{
  if(typeof($re) == 'string')
  {
    var len = $re.length;
    if(len >= 2)
    {
      if($re.charAt(0) == '/')
      {
        var last = $re.lastIndexOf('/');
        if(last > 0)
        {
          $pattern = $re.substr(1, last-1);
          $flags = $re.substr(last+1);
          if($str.match(RegExp($pattern, $flags)))
            return 1;
          else
            return 0;
        }
      }
    }
    throw Error("preg_match unexpected string");
  }
  else if($re instanceof RegExp)
  {
    if($str.match($re))
      return 1;
    else
      return 0;
  }
  else 
    throw Error("preg_match unexpected type");
}

function die()
{
  exit(0);
}

function flush()
{
  //FIXME  
}


function connection_aborted()
{
  //FIXME
  return false;
}

function rawurldecode($str)
{
  return decodeURIComponent($str);
}

function ini_get($key)
{
  return false;//FIXME
}

function ini_set($key, $val)
{
//FIXME
}

function hexdec($h)
{
  return parseInt($h, 16);
}

function dechex($d)
{
  return $d.toString(16);
}

function fopen($path,$mode)
{
  return ccsp.fopen($path, $mode);
}
function fclose($file)
{
  return ccsp.fclose($file);
}
function fread($file,$len)
{
  return ccsp.fread($file, $len);
}
function fwrite($file,$str)
{
  return ccsp.fwrite($file, $str);
}
function feof($file)
{
  return ccsp.feof($file);
}
function fgets($file)
{
  return ccsp.fgets($file);
}
function fseek($file, $pos)
{
  return ccsp.fseek($file, $pos);
}

function is_readable($path)
{
  return ccsp.is_readable($path);
}
function filesize($path)
{
  return ccsp.filesize($path);
}
function logger($log)
{
  return ccsp.logger($log);
}


/*
 * dm wrapper functions
 * these help avoid having to update all the files calling these methods
 */

function getStr($key)
{
	return ccsp_cosa.getStr($key);
}
function setStr($key,$val,$commit)
{
	return ccsp_cosa.setStr($key,$val,$commit);
}
function getInstanceIds($val)
{
	return ccsp_cosa.getInstanceIds($val);
}
function DmExtGetStrsWithRootObj($root, $param)
{
  return ccsp_cosa.DmExtGetStrsWithRootObj($root, $param);
}
function DmExtSetStrsWithRootObj($root, $commit, $param)
{
	return ccsp_cosa.DmExtSetStrsWithRootObj($root, $commit, $param);
}
function DmExtGetInstanceIds($val)
{
	return ccsp_cosa.DmExtGetInstanceIds($val);
}
function addTblObj($key)
{
	return ccsp_cosa.addTblObj($key);
}
function delTblObj($key)
{
	return ccsp_cosa.delTblObj($key);
}
function getJWT($tokenendpoint, $clientid, $pStr, $JWTfile)
{
	return ccsp_cosa.getJWT($tokenendpoint, $clientid, $pStr, $JWTfile);
}


?>
